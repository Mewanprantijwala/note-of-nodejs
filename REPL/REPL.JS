console.log("Welcome to the REPL! Type 'exit' to quit.");
// R - Read, E - Evaluate, P - Print, L - Loop 

// R - Read  //(for user input)
// E - Eval  //(for mathamatical expressions)
// P - Print // (for output results)
// Read-Eval-Print Loop (REPL) implementation
// L - Loop  // (for continuous interaction)


//In Node.js, REPL stands for Read-Eval-Print Loop. It's an interactive shell that allows you to execute JavaScript code line by line, similar to a command-line environment. It's very useful for experimenting, debugging, or learning.

//üîÅ What REPL Does:
//Read: It reads the input from the user.
//Eval: It evaluates the input (executes the JavaScript code).
//Print: It prints the result of the evaluation.
//Loop: It repeats the cycle.//


// ...existing code...

/*
REPL (Read-Eval-Print Loop) executes JavaScript code line by line, similar to a command-line environment.
It's very useful for experimenting, debugging, or learning.

What REPL Does:
- Read: It reads the input from the user.
- Eval: It evaluates the input (executes the JavaScript code).
- Print: It prints the result of the evaluation.
- Loop: It repeats the cycle.

Common Core Modules in Node.js:
- fs: File System (read/write files, directories, streams)
- http: Create HTTP servers and handle HTTP requests/responses
- https: Same as http, but supports SSL/TLS
- url: Parse and format URLs
- path: Work with file and directory paths
- os: Get system-related information (CPU, memory, etc.)
- events: Handle and emit custom events
- stream: Create and manage data streams
- util: Utility functions (inheritance, debugging, etc.)
- crypto: Perform cryptographic operations (hashing, encryption)
- buffer: Work with binary data
- querystring: Parse and format URL query strings
- zlib: Compression and decompression using Gzip/Deflate
*/

// ...existing code...‚úÖ Common Core Modules in Node.js


